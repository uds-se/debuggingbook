<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="291pt" height="569pt"
 viewBox="0.00 0.00 290.50 569.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 565)">
<title>%3</title>
<g id="a_graph0"><a xlink:title="Debugger class hierarchy">
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-565 286.5,-565 286.5,4 -4,4"/>
</a>
</g>
<!-- Debugger -->
<g id="node1" class="node">
<title>Debugger</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class Debugger:&#10;Interactive Debugger">
<polygon fill="none" stroke="#000000" points="21,-.5 21,-196.5 146,-196.5 146,-.5 21,-.5"/>
<text text-anchor="start" x="49.5" y="-182.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">Debugger</text>
<polyline fill="none" stroke="#000000" points="21,-173.5 146,-173.5 "/>
<g id="a_node1_0"><a xlink:href="#" xlink:title="Debugger">
<g id="a_node1_1"><a xlink:href="#" xlink:title="__init__(self, *, file:TextIO=&lt;ipykernel.iostream.OutStream object at 0x7faffd13a160&gt;) &#45;&gt; None:&#10;Create a new interactive debugger.">
<text text-anchor="start" x="29.5" y="-162" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node1_2"><a xlink:href="#" xlink:title="break_command(self, arg:str=&#39;&#39;) &#45;&gt; None:&#10;Set a breakoint in given line. If no line is given, list all breakpoints">
<text text-anchor="start" x="29.5" y="-150" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">break_command()</text>
</a>
</g>
<g id="a_node1_3"><a xlink:href="#" xlink:title="command_method(self, command:str) &#45;&gt; Union[Callable[[str], NoneType], NoneType]:&#10;Convert `command` into the method to be called.&#10;If the method is not found, return `None` instead.">
<text text-anchor="start" x="29.5" y="-139" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">command_method()</text>
</a>
</g>
<g id="a_node1_4"><a xlink:href="#" xlink:title="commands(self) &#45;&gt; List[str]:&#10;Return a list of commands">
<text text-anchor="start" x="29.5" y="-128" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">commands()</text>
</a>
</g>
<g id="a_node1_5"><a xlink:href="#" xlink:title="continue_command(self, arg:str=&#39;&#39;) &#45;&gt; None:&#10;Resume execution">
<text text-anchor="start" x="29.5" y="-117" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">continue_command()</text>
</a>
</g>
<g id="a_node1_6"><a xlink:href="#" xlink:title="delete_command(self, arg:str=&#39;&#39;) &#45;&gt; None:&#10;Delete breakoint in line given by `arg`.&#10;Without given line, clear all breakpoints">
<text text-anchor="start" x="29.5" y="-106" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">delete_command()</text>
</a>
</g>
<g id="a_node1_7"><a xlink:href="#" xlink:title="execute(self, command:str) &#45;&gt; None:&#10;Execute `command`">
<text text-anchor="start" x="29.5" y="-95" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">execute()</text>
</a>
</g>
<g id="a_node1_8"><a xlink:href="#" xlink:title="help_command(self, command:str=&#39;&#39;) &#45;&gt; None:&#10;Give help on given `command`. If no command is given, give help on all">
<text text-anchor="start" x="29.5" y="-84" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">help_command()</text>
</a>
</g>
<g id="a_node1_9"><a xlink:href="#" xlink:title="interaction_loop(self) &#45;&gt; None:&#10;Interact with the user">
<text text-anchor="start" x="29.5" y="-73" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">interaction_loop()</text>
</a>
</g>
<g id="a_node1_10"><a xlink:href="#" xlink:title="list_command(self, arg:str=&#39;&#39;) &#45;&gt; None:&#10;Show current function. If `arg` is given, show its source code.">
<text text-anchor="start" x="29.5" y="-62" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">list_command()</text>
</a>
</g>
<g id="a_node1_11"><a xlink:href="#" xlink:title="print_command(self, arg:str=&#39;&#39;) &#45;&gt; None:&#10;Print an expression. If no expression is given, print all variables">
<text text-anchor="start" x="29.5" y="-51" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">print_command()</text>
</a>
</g>
<g id="a_node1_12"><a xlink:href="#" xlink:title="quit_command(self, arg:str=&#39;&#39;) &#45;&gt; None:&#10;Finish execution">
<text text-anchor="start" x="29.5" y="-40" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">quit_command()</text>
</a>
</g>
<g id="a_node1_13"><a xlink:href="#" xlink:title="step_command(self, arg:str=&#39;&#39;) &#45;&gt; None:&#10;Execute up to the next line">
<text text-anchor="start" x="29.5" y="-29" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">step_command()</text>
</a>
</g>
<g id="a_node1_14"><a xlink:href="#" xlink:title="stop_here(self) &#45;&gt; bool:&#10;Return True if we should stop">
<text text-anchor="start" x="29.5" y="-18" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">stop_here()</text>
</a>
</g>
<g id="a_node1_15"><a xlink:href="#" xlink:title="traceit(self, frame:frame, event:str, arg:Any) &#45;&gt; None:&#10;Tracing function; called at every line. To be overloaded in subclasses.">
<text text-anchor="start" x="29.5" y="-8" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00" fill="#000000">traceit()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- Tracer -->
<g id="node2" class="node">
<title>Tracer</title>
<g id="a_node2"><a xlink:href="Tracer.ipynb" xlink:title="class Tracer:&#10;A class for tracing a piece of code. Use as `with Tracer(): block()`">
<polygon fill="none" stroke="#000000" points="6,-233.5 6,-352.5 161,-352.5 161,-233.5 6,-233.5"/>
<text text-anchor="start" x="61.5" y="-338.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">Tracer</text>
<polyline fill="none" stroke="#000000" points="6,-329.5 161,-329.5 "/>
<g id="a_node2_16"><a xlink:href="#" xlink:title="Tracer">
<g id="a_node2_17"><a xlink:href="Tracer.ipynb" xlink:title="__enter__(self) &#45;&gt; Any:&#10;Called at begin of `with` block. Turn tracing on.">
<text text-anchor="start" x="14.5" y="-318.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">__enter__()</text>
</a>
</g>
<g id="a_node2_18"><a xlink:href="Tracer.ipynb" xlink:title="__exit__(self, exc_tp:Type, exc_value:BaseException, exc_traceback:traceback) &#45;&gt; Union[bool, NoneType]:&#10;Called at end of `with` block. Turn tracing off.&#10;Return `None` if ok, not `None` if internal error.">
<text text-anchor="start" x="14.5" y="-307.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00" fill="#000000">__exit__()</text>
</a>
</g>
<g id="a_node2_19"><a xlink:href="Tracer.ipynb" xlink:title="__init__(self, file:TextIO=&lt;ipykernel.iostream.OutStream object at 0x7faffd13a160&gt;) &#45;&gt; None:&#10;Create a new tracer.&#10;If `file` is given, output to `file` instead of stdout.">
<text text-anchor="start" x="14.5" y="-296.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">__init__()</text>
</a>
</g>
<g id="a_node2_20"><a xlink:href="Tracer.ipynb" xlink:title="traceit(self, frame:frame, event:str, arg:Any) &#45;&gt; None:&#10;Tracing function; called at every line. To be overloaded in subclasses.">
<text text-anchor="start" x="14.5" y="-285.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00" fill="#000000">traceit()</text>
</a>
</g>
<g id="a_node2_21"><a xlink:href="Tracer.ipynb" xlink:title="_traceit(self, frame:frame, event:str, arg:Any) &#45;&gt; Union[Callable, NoneType]:&#10;Internal tracing function.">
<text text-anchor="start" x="14.5" y="-273.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">_traceit()</text>
</a>
</g>
<g id="a_node2_22"><a xlink:href="Tracer.ipynb" xlink:title="changed_vars(self, new_vars:Dict[str, Any]) &#45;&gt; Dict[str, Any]:&#10;Track changed variables, based on `new_vars` observed.">
<text text-anchor="start" x="14.5" y="-262.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">changed_vars()</text>
</a>
</g>
<g id="a_node2_23"><a xlink:href="Tracer.ipynb" xlink:title="log(self, *objects:Any, sep:str=&#39; &#39;, end:str=&#39;\n&#39;, flush:bool=True) &#45;&gt; None:&#10;Like `print()`, but always sending to `file` given at initialization,&#10;and flushing by default.">
<text text-anchor="start" x="14.5" y="-251.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">log()</text>
</a>
</g>
<g id="a_node2_24"><a xlink:href="Tracer.ipynb" xlink:title="print_debugger_status(self, frame:frame, event:str, arg:Any) &#45;&gt; None:&#10;Show current source line and changed vars">
<text text-anchor="start" x="14.5" y="-240.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">print_debugger_status()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- Debugger&#45;&gt;Tracer -->
<g id="edge1" class="edge">
<title>Debugger&#45;&gt;Tracer</title>
<path fill="none" stroke="#000000" d="M83.5,-196.6047C83.5,-205.6298 83.5,-214.6451 83.5,-223.3396"/>
<polygon fill="none" stroke="#000000" points="80.0001,-223.3802 83.5,-233.3803 87.0001,-223.3803 80.0001,-223.3802"/>
</g>
<!-- StackInspector -->
<g id="node3" class="node">
<title>StackInspector</title>
<g id="a_node3"><a xlink:href="StackInspector.ipynb" xlink:title="class StackInspector:&#10;Provide functions to inspect the stack">
<polygon fill="none" stroke="#000000" points="0,-389.5 0,-560.5 167,-560.5 167,-389.5 0,-389.5"/>
<text text-anchor="start" x="32.5" y="-546.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">StackInspector</text>
<polyline fill="none" stroke="#000000" points="0,-537.5 167,-537.5 "/>
<g id="a_node3_25"><a xlink:href="#" xlink:title="StackInspector">
<g id="a_node3_26"><a xlink:href="StackInspector.ipynb" xlink:title="_generated_function_cache = {}">
<text text-anchor="start" x="8.5" y="-525" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">_generated_function_cache</text>
</a>
</g>
</a>
</g>
<polyline fill="none" stroke="#000000" points="0,-518.5 167,-518.5 "/>
<g id="a_node3_27"><a xlink:href="#" xlink:title="StackInspector">
<g id="a_node3_28"><a xlink:href="StackInspector.ipynb" xlink:title="caller_frame(self) &#45;&gt; frame:&#10;Return the frame of the caller.">
<text text-anchor="start" x="26.5" y="-506" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_frame()</text>
</a>
</g>
<g id="a_node3_29"><a xlink:href="StackInspector.ipynb" xlink:title="caller_function(self) &#45;&gt; Callable:&#10;Return the calling function">
<text text-anchor="start" x="26.5" y="-495" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_function()</text>
</a>
</g>
<g id="a_node3_30"><a xlink:href="StackInspector.ipynb" xlink:title="caller_globals(self) &#45;&gt; Dict[str, Any]:&#10;Return the globals() environment of the caller.">
<text text-anchor="start" x="26.5" y="-484" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_globals()</text>
</a>
</g>
<g id="a_node3_31"><a xlink:href="StackInspector.ipynb" xlink:title="caller_locals(self) &#45;&gt; Dict[str, Any]:&#10;Return the locals() environment of the caller.">
<text text-anchor="start" x="26.5" y="-473" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_locals()</text>
</a>
</g>
<g id="a_node3_32"><a xlink:href="StackInspector.ipynb" xlink:title="caller_location(self) &#45;&gt; Tuple[Callable, int]:&#10;Return the location (func, lineno) of the caller.">
<text text-anchor="start" x="26.5" y="-462" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">caller_location()</text>
</a>
</g>
<g id="a_node3_33"><a xlink:href="StackInspector.ipynb" xlink:title="create_function(self, frame:frame) &#45;&gt; Callable:&#10;Create function for given frame">
<text text-anchor="start" x="26.5" y="-451" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">create_function()</text>
</a>
</g>
<g id="a_node3_34"><a xlink:href="StackInspector.ipynb" xlink:title="is_internal_error(self, exc_tp:Type, exc_value:BaseException, exc_traceback:traceback) &#45;&gt; bool:&#10;Return True if exception was raised from `StackInspector` or a subclass.">
<text text-anchor="start" x="26.5" y="-440" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">is_internal_error()</text>
</a>
</g>
<g id="a_node3_35"><a xlink:href="StackInspector.ipynb" xlink:title="our_frame(self, frame:frame) &#45;&gt; bool:&#10;Return true if `frame` is in the current (inspecting) class.">
<text text-anchor="start" x="26.5" y="-429" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">our_frame()</text>
</a>
</g>
<g id="a_node3_36"><a xlink:href="StackInspector.ipynb" xlink:title="search_frame(self, name:str, frame:Union[frame, NoneType]=None) &#45;&gt; Tuple[Union[frame, NoneType], Union[Callable, NoneType]]:&#10;Return a pair (`frame`, `item`)&#10;in which the function `name` is defined as `item`.">
<text text-anchor="start" x="26.5" y="-418" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">search_frame()</text>
</a>
</g>
<g id="a_node3_37"><a xlink:href="StackInspector.ipynb" xlink:title="search_func(self, name:str, frame:Union[frame, NoneType]=None) &#45;&gt; Union[Callable, NoneType]:&#10;Search in callers for a definition of the function `name`">
<text text-anchor="start" x="26.5" y="-407" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">search_func()</text>
</a>
</g>
<g id="a_node3_38"><a xlink:href="StackInspector.ipynb" xlink:title="unknown(self) &#45;&gt; None">
<text text-anchor="start" x="26.5" y="-396" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00" fill="#000000">unknown()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- Tracer&#45;&gt;StackInspector -->
<g id="edge2" class="edge">
<title>Tracer&#45;&gt;StackInspector</title>
<path fill="none" stroke="#000000" d="M83.5,-352.5936C83.5,-361.1051 83.5,-370.0343 83.5,-379.0285"/>
<polygon fill="none" stroke="#000000" points="80.0001,-379.192 83.5,-389.1921 87.0001,-379.1921 80.0001,-379.192"/>
</g>
<!-- Legend -->
<g id="node4" class="node">
<title>Legend</title>
<text text-anchor="start" x="164.5" y="-116" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="10.00" fill="#6a0dad">Legend</text>
<text text-anchor="start" x="164.5" y="-106" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00" fill="#000000">• </text>
<text text-anchor="start" x="171.5" y="-106" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00" fill="#000000">public_method()</text>
<text text-anchor="start" x="164.5" y="-96" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00" fill="#000000">• </text>
<text text-anchor="start" x="171.5" y="-96" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00" fill="#000000">private_method()</text>
<text text-anchor="start" x="164.5" y="-86" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00" fill="#000000">• </text>
<text text-anchor="start" x="171.5" y="-86" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00" fill="#000000">overloaded_method()</text>
<text text-anchor="start" x="164.5" y="-76.8" font-family="Helvetica,sans-Serif" font-size="9.00" fill="#000000">Hover over names to see doc</text>
</g>
</g>
</svg>
